# -*- coding: utf-8 -*-
"""Handwritten Digit Recognition using SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3flhlL8GKqlFx3x8DG0L4n3nGF714bs
"""

import numpy as np
from sklearn.datasets import load_digits

df = load_digits()

"""#Summarize Dataset"""

print(df.data)
print(df.target)

print(df.data.shape)
print(df.images.shape)

dataimageLength = len(df.images)
print(dataimageLength)

"""# Visualize the Dataset"""

n=7 # no. of sample out of samples total 1797

import matplotlib.pyplot as plt

plt.gray()
plt.matshow(df.images[n])
plt.show()

df.images[n]

"""#Splitting Train & Test"""

X = df.images.reshape((dataimageLength, -1))
Y = df.target

print(X)
print(Y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size =0.25, random_state = 0)

"""#Training"""

from sklearn import svm
model = svm.SVC(kernel='linear')
model.fit(X_train, y_train)

"""# Predicting what the digit is from Test Data"""

n=13
result = model.predict(df.images[n].reshape((1,-1)))
plt.imshow(df.images[n], cmap=plt.cm.gray_r, interpolation = 'nearest')
print(result)
print("\n")
plt.axis('off')
plt.title('%i' %result)
plt.show()

"""#Prediction for Test Data"""

y_pred = model.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""#Evaluate Model - Accuracy Score"""

from sklearn.metrics import accuracy_score
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_pred)*100))

"""# Play with the Different Method"""

from sklearn import svm
model1 = svm.SVC(kernel='linear')
model2 = svm.SVC(kernel='rbf')
model3 = svm.SVC(gamma=0.001)
model4 = svm.SVC(gamma=0.001,C=0.1)

model1.fit(X_train,y_train)
model2.fit(X_train,y_train)
model3.fit(X_train,y_train)
model4.fit(X_train,y_train)

y_predModel1 = model1.predict(X_test)
y_predModel2 = model2.predict(X_test)
y_predModel3 = model3.predict(X_test)
y_predModel4 = model4.predict(X_test)

print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_predModel1)*100))
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_predModel2)*100))
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_predModel3)*100))
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_predModel4)*100))